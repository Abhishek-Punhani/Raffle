/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Raffle,
  RaffleInterface,
} from "../../../contracts/raffle.sol/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "gaslane",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughETHEntered",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__RaffleNotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numPlayers",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__UpkeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestedRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequestConfirmations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61016060405234801561001157600080fd5b506040516118b73803806118b783398181016040528101906100339190610270565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff16815250508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff16815250508163ffffffff166101008163ffffffff16815250506000600160146101000a81548160ff02191690836001811115610105576101046102fd565b5b02179055504260028190555080610140818152505050505050505061032c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101558261012a565b9050919050565b6101658161014a565b811461017057600080fd5b50565b6000815190506101828161015c565b92915050565b6000819050919050565b61019b81610188565b81146101a657600080fd5b50565b6000815190506101b881610192565b92915050565b6000819050919050565b6101d1816101be565b81146101dc57600080fd5b50565b6000815190506101ee816101c8565b92915050565b600067ffffffffffffffff82169050919050565b610211816101f4565b811461021c57600080fd5b50565b60008151905061022e81610208565b92915050565b600063ffffffff82169050919050565b61024d81610234565b811461025857600080fd5b50565b60008151905061026a81610244565b92915050565b60008060008060008060c0878903121561028d5761028c610125565b5b600061029b89828a01610173565b96505060206102ac89828a016101a9565b95505060406102bd89828a016101df565b94505060606102ce89828a0161021f565b93505060806102df89828a0161025b565b92505060a06102f089828a016101a9565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161151c61039b600039600081816107dc015261084a0152600061061b0152600061069b01526000610678015260006106570152600081816102fa01526103f7015260008181610337015261038b015261151c6000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063e55ae4e814610263578063f43b52cb146102a0578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780635f1b0fd8146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610ca6565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610d38565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610eec565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610fa3565b610564565b005b34801561018557600080fd5b5061018e610754565b60405161019b9190611031565b60405180910390f35b3480156101b057600080fd5b506101b961077e565b6040516101c69190610ca6565b60405180910390f35b3480156101db57600080fd5b506101e461078d565b6040516101f19190610ca6565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190611101565b61079a565b60405161022f9291906111e4565b60405180910390f35b34801561024457600080fd5b5061024d610846565b60405161025a9190610ca6565b60405180910390f35b34801561026f57600080fd5b5061028a60048036038101906102859190611214565b61086e565b6040516102979190611031565b60405180910390f35b3480156102ac57600080fd5b506102b56108b5565b6040516102c29190610ca6565b60405180910390f35b3480156102d757600080fd5b506102e06108bf565b6040516102ed9190610ca6565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190611241565b60405180910390fd5b6103f182826108cb565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610cc1565b5b600160149054906101000a900460ff16600181111561048557610484610cc1565b5b146104bc576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061057e6040518060200160405280600081525061079a565b509050806105ed5747600080549050600160149054906101000a900460ff1660018111156105af576105ae610cc1565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105e49392919061126a565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561061257610611610cc1565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106dc959493929190611319565b6020604051808303816000875af11580156106fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071f9190611381565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000606060008060018111156107b3576107b2610cc1565b5b600160149054906101000a900460ff1660018111156107d5576107d4610cc1565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261080991906113dd565b119050600080600080549050119050600080471190508380156108295750825b80156108325750815b801561083b5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061088357610882611411565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050905090565b60008080549050826000815181106108e6576108e5611411565b5b60200260200101516108f8919061146f565b9050600080828154811061090f5761090e611411565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109a3576109a2610cc1565b5b0217905550600067ffffffffffffffff8111156109c3576109c2610da9565b5b6040519080825280602002602001820160405280156109f15781602001602082028036833780820191505090505b5060009080519060200190610a07929190610b5c565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a35906114d1565b60006040518083038185875af1925050503d8060008114610a72576040519150601f19603f3d011682016040523d82523d6000602084013e610a77565b606091505b5050905080610ab2576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a2600067ffffffffffffffff811115610b1057610b0f610da9565b5b604051908082528060200260200182016040528015610b3e5781602001602082028036833780820191505090505b5060009080519060200190610b54929190610be6565b505050505050565b828054828255906000526020600020908101928215610bd5579160200282015b82811115610bd45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b7c565b5b509050610be29190610c70565b5090565b828054828255906000526020600020908101928215610c5f579160200282015b82811115610c5e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c06565b5b509050610c6c9190610c70565b5090565b5b80821115610c89576000816000905550600101610c71565b5090565b6000819050919050565b610ca081610c8d565b82525050565b6000602082019050610cbb6000830184610c97565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d0157610d00610cc1565b5b50565b6000819050610d1282610cf0565b919050565b6000610d2282610d04565b9050919050565b610d3281610d17565b82525050565b6000602082019050610d4d6000830184610d29565b92915050565b6000604051905090565b600080fd5b600080fd5b610d7081610c8d565b8114610d7b57600080fd5b50565b600081359050610d8d81610d67565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610de182610d98565b810181811067ffffffffffffffff82111715610e0057610dff610da9565b5b80604052505050565b6000610e13610d53565b9050610e1f8282610dd8565b919050565b600067ffffffffffffffff821115610e3f57610e3e610da9565b5b602082029050602081019050919050565b600080fd5b6000610e68610e6384610e24565b610e09565b90508083825260208201905060208402830185811115610e8b57610e8a610e50565b5b835b81811015610eb45780610ea08882610d7e565b845260208401935050602081019050610e8d565b5050509392505050565b600082601f830112610ed357610ed2610d93565b5b8135610ee3848260208601610e55565b91505092915050565b60008060408385031215610f0357610f02610d5d565b5b6000610f1185828601610d7e565b925050602083013567ffffffffffffffff811115610f3257610f31610d62565b5b610f3e85828601610ebe565b9150509250929050565b600080fd5b60008083601f840112610f6357610f62610d93565b5b8235905067ffffffffffffffff811115610f8057610f7f610f48565b5b602083019150836001820283011115610f9c57610f9b610e50565b5b9250929050565b60008060208385031215610fba57610fb9610d5d565b5b600083013567ffffffffffffffff811115610fd857610fd7610d62565b5b610fe485828601610f4d565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061101b82610ff0565b9050919050565b61102b81611010565b82525050565b60006020820190506110466000830184611022565b92915050565b600080fd5b600067ffffffffffffffff82111561106c5761106b610da9565b5b61107582610d98565b9050602081019050919050565b82818337600083830152505050565b60006110a461109f84611051565b610e09565b9050828152602081018484840111156110c0576110bf61104c565b5b6110cb848285611082565b509392505050565b600082601f8301126110e8576110e7610d93565b5b81356110f8848260208601611091565b91505092915050565b60006020828403121561111757611116610d5d565b5b600082013567ffffffffffffffff81111561113557611134610d62565b5b611141848285016110d3565b91505092915050565b60008115159050919050565b61115f8161114a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561119f578082015181840152602081019050611184565b60008484015250505050565b60006111b682611165565b6111c08185611170565b93506111d0818560208601611181565b6111d981610d98565b840191505092915050565b60006040820190506111f96000830185611156565b818103602083015261120b81846111ab565b90509392505050565b60006020828403121561122a57611229610d5d565b5b600061123884828501610d7e565b91505092915050565b60006040820190506112566000830185611022565b6112636020830184611022565b9392505050565b600060608201905061127f6000830186610c97565b61128c6020830185610c97565b6112996040830184610c97565b949350505050565b6000819050919050565b6112b4816112a1565b82525050565b600067ffffffffffffffff82169050919050565b6112d7816112ba565b82525050565b600061ffff82169050919050565b6112f4816112dd565b82525050565b600063ffffffff82169050919050565b611313816112fa565b82525050565b600060a08201905061132e60008301886112ab565b61133b60208301876112ce565b61134860408301866112eb565b611355606083018561130a565b611362608083018461130a565b9695505050505050565b60008151905061137b81610d67565b92915050565b60006020828403121561139757611396610d5d565b5b60006113a58482850161136c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113e882610c8d565b91506113f383610c8d565b925082820390508181111561140b5761140a6113ae565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061147a82610c8d565b915061148583610c8d565b92508261149557611494611440565b5b828206905092915050565b600081905092915050565b50565b60006114bb6000836114a0565b91506114c6826114ab565b600082019050919050565b60006114dc826114ae565b915081905091905056fea26469706673582212205f27ea0a7dae888a5427d52b46ab079fb1e22e9ab1fbecf1b6dc48926115195f64736f6c634300081c0033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    vrfCoordinatorV2: AddressLike,
    entranceFee: BigNumberish,
    gaslane: BytesLike,
    subscriptionId: BigNumberish,
    callbackGasLimit: BigNumberish,
    interval: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      vrfCoordinatorV2,
      entranceFee,
      gaslane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    );
  }
  override deploy(
    vrfCoordinatorV2: AddressLike,
    entranceFee: BigNumberish,
    gaslane: BytesLike,
    subscriptionId: BigNumberish,
    callbackGasLimit: BigNumberish,
    interval: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      vrfCoordinatorV2,
      entranceFee,
      gaslane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    ) as Promise<
      Raffle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Raffle__factory {
    return super.connect(runner) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Raffle {
    return new Contract(address, _abi, runner) as unknown as Raffle;
  }
}
