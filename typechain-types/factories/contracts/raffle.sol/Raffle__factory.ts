/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Raffle,
  RaffleInterface,
} from "../../../contracts/raffle.sol/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "gaslane",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughETHEntered",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__RaffleNotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numPlayers",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__UpkeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestedRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequestConfirmations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61016060405234801561001157600080fd5b5060405161184238038061184283398181016040528101906100339190610270565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff16815250508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff16815250508163ffffffff166101008163ffffffff16815250506000600160146101000a81548160ff02191690836001811115610105576101046102fd565b5b02179055504260028190555080610140818152505050505050505061032c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101558261012a565b9050919050565b6101658161014a565b811461017057600080fd5b50565b6000815190506101828161015c565b92915050565b6000819050919050565b61019b81610188565b81146101a657600080fd5b50565b6000815190506101b881610192565b92915050565b6000819050919050565b6101d1816101be565b81146101dc57600080fd5b50565b6000815190506101ee816101c8565b92915050565b600067ffffffffffffffff82169050919050565b610211816101f4565b811461021c57600080fd5b50565b60008151905061022e81610208565b92915050565b600063ffffffff82169050919050565b61024d81610234565b811461025857600080fd5b50565b60008151905061026a81610244565b92915050565b60008060008060008060c0878903121561028d5761028c610125565b5b600061029b89828a01610173565b96505060206102ac89828a016101a9565b95505060406102bd89828a016101df565b94505060606102ce89828a0161021f565b93505060806102df89828a0161025b565b92505060a06102f089828a016101a9565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516114ae6103946000396000610796015260006105d50152600061065501526000610632015260006106110152600081816102b401526103b10152600081816102f1015261034501526114ae6000f3fe6080604052600436106100a75760003560e01c806353a2c19a1161006457806353a2c19a146101895780635f1b0fd8146101b45780636e04ff0d146101df578063e55ae4e81461021d578063f43b52cb1461025a578063fd6673f514610285576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b5780634585e33b14610135578063473f1ddc1461015e575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610c38565b60405180910390f35b3480156100e357600080fd5b506100ec6102d8565b6040516100f99190610cca565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610e7e565b6102ef565b005b6101336103af565b005b34801561014157600080fd5b5061015c60048036038101906101579190610f35565b61051e565b005b34801561016a57600080fd5b5061017361070e565b6040516101809190610fc3565b60405180910390f35b34801561019557600080fd5b5061019e610738565b6040516101ab9190610c38565b60405180910390f35b3480156101c057600080fd5b506101c9610747565b6040516101d69190610c38565b60405180910390f35b3480156101eb57600080fd5b5061020660048036038101906102019190611093565b610754565b604051610214929190611176565b60405180910390f35b34801561022957600080fd5b50610244600480360381019061023f91906111a6565b610800565b6040516102519190610fc3565b60405180910390f35b34801561026657600080fd5b5061026f610847565b60405161027c9190610c38565b60405180910390f35b34801561029157600080fd5b5061029a610851565b6040516102a79190610c38565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103989291906111d3565b60405180910390fd5b6103ab828261085d565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610409576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561041d5761041c610c53565b5b600160149054906101000a900460ff16600181111561043f5761043e610c53565b5b14610476576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061053860405180602001604052806000815250610754565b509050806105a75747600080549050600160149054906101000a900460ff16600181111561056957610568610c53565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161059e939291906111fc565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105cc576105cb610c53565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106969594939291906112ab565b6020604051808303816000875af11580156106b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d99190611313565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b60006060600080600181111561076d5761076c610c53565b5b600160149054906101000a900460ff16600181111561078f5761078e610c53565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107c3919061136f565b119050600080600080549050119050600080471190508380156107e35750825b80156107ec5750815b80156107f55750805b955050505050915091565b6000808281548110610815576108146113a3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050905090565b6000808054905082600081518110610878576108776113a3565b5b602002602001015161088a9190611401565b905060008082815481106108a1576108a06113a3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083600181111561093557610934610c53565b5b0217905550600067ffffffffffffffff81111561095557610954610d3b565b5b6040519080825280602002602001820160405280156109835781602001602082028036833780820191505090505b5060009080519060200190610999929190610aee565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109c790611463565b60006040518083038185875af1925050503d8060008114610a04576040519150601f19603f3d011682016040523d82523d6000602084013e610a09565b606091505b5050905080610a44576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a2600067ffffffffffffffff811115610aa257610aa1610d3b565b5b604051908082528060200260200182016040528015610ad05781602001602082028036833780820191505090505b5060009080519060200190610ae6929190610b78565b505050505050565b828054828255906000526020600020908101928215610b67579160200282015b82811115610b665782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b0e565b5b509050610b749190610c02565b5090565b828054828255906000526020600020908101928215610bf1579160200282015b82811115610bf05782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b98565b5b509050610bfe9190610c02565b5090565b5b80821115610c1b576000816000905550600101610c03565b5090565b6000819050919050565b610c3281610c1f565b82525050565b6000602082019050610c4d6000830184610c29565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c9357610c92610c53565b5b50565b6000819050610ca482610c82565b919050565b6000610cb482610c96565b9050919050565b610cc481610ca9565b82525050565b6000602082019050610cdf6000830184610cbb565b92915050565b6000604051905090565b600080fd5b600080fd5b610d0281610c1f565b8114610d0d57600080fd5b50565b600081359050610d1f81610cf9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d7382610d2a565b810181811067ffffffffffffffff82111715610d9257610d91610d3b565b5b80604052505050565b6000610da5610ce5565b9050610db18282610d6a565b919050565b600067ffffffffffffffff821115610dd157610dd0610d3b565b5b602082029050602081019050919050565b600080fd5b6000610dfa610df584610db6565b610d9b565b90508083825260208201905060208402830185811115610e1d57610e1c610de2565b5b835b81811015610e465780610e328882610d10565b845260208401935050602081019050610e1f565b5050509392505050565b600082601f830112610e6557610e64610d25565b5b8135610e75848260208601610de7565b91505092915050565b60008060408385031215610e9557610e94610cef565b5b6000610ea385828601610d10565b925050602083013567ffffffffffffffff811115610ec457610ec3610cf4565b5b610ed085828601610e50565b9150509250929050565b600080fd5b60008083601f840112610ef557610ef4610d25565b5b8235905067ffffffffffffffff811115610f1257610f11610eda565b5b602083019150836001820283011115610f2e57610f2d610de2565b5b9250929050565b60008060208385031215610f4c57610f4b610cef565b5b600083013567ffffffffffffffff811115610f6a57610f69610cf4565b5b610f7685828601610edf565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fad82610f82565b9050919050565b610fbd81610fa2565b82525050565b6000602082019050610fd86000830184610fb4565b92915050565b600080fd5b600067ffffffffffffffff821115610ffe57610ffd610d3b565b5b61100782610d2a565b9050602081019050919050565b82818337600083830152505050565b600061103661103184610fe3565b610d9b565b90508281526020810184848401111561105257611051610fde565b5b61105d848285611014565b509392505050565b600082601f83011261107a57611079610d25565b5b813561108a848260208601611023565b91505092915050565b6000602082840312156110a9576110a8610cef565b5b600082013567ffffffffffffffff8111156110c7576110c6610cf4565b5b6110d384828501611065565b91505092915050565b60008115159050919050565b6110f1816110dc565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611131578082015181840152602081019050611116565b60008484015250505050565b6000611148826110f7565b6111528185611102565b9350611162818560208601611113565b61116b81610d2a565b840191505092915050565b600060408201905061118b60008301856110e8565b818103602083015261119d818461113d565b90509392505050565b6000602082840312156111bc576111bb610cef565b5b60006111ca84828501610d10565b91505092915050565b60006040820190506111e86000830185610fb4565b6111f56020830184610fb4565b9392505050565b60006060820190506112116000830186610c29565b61121e6020830185610c29565b61122b6040830184610c29565b949350505050565b6000819050919050565b61124681611233565b82525050565b600067ffffffffffffffff82169050919050565b6112698161124c565b82525050565b600061ffff82169050919050565b6112868161126f565b82525050565b600063ffffffff82169050919050565b6112a58161128c565b82525050565b600060a0820190506112c0600083018861123d565b6112cd6020830187611260565b6112da604083018661127d565b6112e7606083018561129c565b6112f4608083018461129c565b9695505050505050565b60008151905061130d81610cf9565b92915050565b60006020828403121561132957611328610cef565b5b6000611337848285016112fe565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061137a82610c1f565b915061138583610c1f565b925082820390508181111561139d5761139c611340565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061140c82610c1f565b915061141783610c1f565b925082611427576114266113d2565b5b828206905092915050565b600081905092915050565b50565b600061144d600083611432565b91506114588261143d565b600082019050919050565b600061146e82611440565b915081905091905056fea26469706673582212201aba536a6600e2b2795f5a9147d3c3f915fef09a671cc8dc5059414cff180d8264736f6c634300081c0033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    vrfCoordinatorV2: AddressLike,
    entranceFee: BigNumberish,
    gaslane: BytesLike,
    subscriptionId: BigNumberish,
    callbackGasLimit: BigNumberish,
    interval: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      vrfCoordinatorV2,
      entranceFee,
      gaslane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    );
  }
  override deploy(
    vrfCoordinatorV2: AddressLike,
    entranceFee: BigNumberish,
    gaslane: BytesLike,
    subscriptionId: BigNumberish,
    callbackGasLimit: BigNumberish,
    interval: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      vrfCoordinatorV2,
      entranceFee,
      gaslane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    ) as Promise<
      Raffle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Raffle__factory {
    return super.connect(runner) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Raffle {
    return new Contract(address, _abi, runner) as unknown as Raffle;
  }
}
